labs(x ="", y = "Daily Count of Accidents", title = "Milwaukee Traffic Accident Reports",
subtitle = "Each point represents a daily total",
caption = "Source: data.milwaukee.gov.")
d_point_v
max_label <- labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
arrange(desc(total)) %>%
head(n = 5) %>%
mutate(weekday = wday(day))
d_point_v <-labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
ggplot(aes(day, total)) +
# set alpha below 1 to show overplotting
geom_point(alpha = 0.5) +
geom_text(data = max_label,
aes(label = paste(weekday, format(date(day), "%b %d, %Y"), sep = "\n"), y = total, x = day), nudge_y = 7) +
geom_smooth(se = FALSE, color = "red", size = 0.5) +
# geom_smooth will extend below zero if we don't set limits
scale_y_continuous(limits = c(0, 130)) +
theme_minimal() +
labs(x ="", y = "Daily Count of Accidents", title = "Milwaukee Traffic Accident Reports",
subtitle = "Each point represents a daily total",
caption = "Source: data.milwaukee.gov.")
d_point_v
?format
max_label <- labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
arrange(desc(total)) %>%
head(n = 5) %>%
mutate(weekday = wday(day))
d_point_v <-labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
ggplot(aes(day, total)) +
# set alpha below 1 to show overplotting
geom_point(alpha = 0.5) +
geom_text(data = max_label,
aes(label = paste(format(weekday, "%a"), format(date(day), "%b %d, %Y"), sep = "\n"), y = total, x = day), nudge_y = 7) +
geom_smooth(se = FALSE, color = "red", size = 0.5) +
# geom_smooth will extend below zero if we don't set limits
scale_y_continuous(limits = c(0, 130)) +
theme_minimal() +
labs(x ="", y = "Daily Count of Accidents", title = "Milwaukee Traffic Accident Reports",
subtitle = "Each point represents a daily total",
caption = "Source: data.milwaukee.gov.")
d_point_v
d_point_v <-labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
ggplot(aes(day, total)) +
# set alpha below 1 to show overplotting
geom_point(alpha = 0.5) +
geom_text(data = max_label,
aes(label = paste(format(weekday, "%a"), format(date(day), "%b %d, %Y"), sep = " "), y = total, x = day), nudge_y = 7) +
geom_smooth(se = FALSE, color = "red", size = 0.5) +
# geom_smooth will extend below zero if we don't set limits
scale_y_continuous(limits = c(0, 130)) +
theme_minimal() +
labs(x ="", y = "Daily Count of Accidents", title = "Milwaukee Traffic Accident Reports",
subtitle = "Each point represents a daily total",
caption = "Source: data.milwaukee.gov.")
d_point_v
d_point_v <-labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
ggplot(aes(day, total)) +
# set alpha below 1 to show overplotting
geom_point(alpha = 0.5) +
geom_text(data = max_label,
aes(label = format(date(day), "%a, %b %d, %Y"), y = total, x = day), nudge_y = 7) +
geom_smooth(se = FALSE, color = "red", size = 0.5) +
# geom_smooth will extend below zero if we don't set limits
scale_y_continuous(limits = c(0, 130)) +
theme_minimal() +
labs(x ="", y = "Daily Count of Accidents", title = "Milwaukee Traffic Accident Reports",
subtitle = "Each point represents a daily total",
caption = "Source: data.milwaukee.gov.")
d_point_v
max_label <- labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
arrange(desc(total)) %>%
head(n = 5) %>%
mutate(weekday = wday(day))
max_label
mutate(weekday = format(wday(day), "%a")
max_label <- labeled %>%
max_label <- labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
arrange(desc(total)) %>%
head(n = 5) %>%
mutate(weekday = format(wday(day), "%a"))
max_label <- labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
arrange(desc(total)) %>%
head(n = 5) %>%
mutate(weekday = format(day, "%a"))
max_label
View(max_label)
d_point_v
blogdown:::serve_site()
ininstall.packages("waffle")
install.packages("waffle")
scale_label_pictogram
knitr::opts_chunk$set(message=FALSE, warning=FALSE)
# Define the variables
term <- 360 # 30 years in months
loan_amount <- 150000 # $150,000 loan
annual_rate <- 0.04 # 4% interest rate
monthly_rate <- annual_rate/12 # rate converted to monthly rate
# Formula to calculate monthly
# principal + interest payment
total_PI <- loan_amount *
(monthly_rate * (1 + monthly_rate) ^ term)/
(((1 + monthly_rate) ^ term) - 1)
# Initialize the vectors as numeric with a length equal
# to the term of the loan.
interest <- principal <- balance <- vector("numeric", term)
# For loop to calculate values for each payment
for (i in 1:term) {
intr <- loan_amount * monthly_rate
prnp <- total_PI - intr
loan_amount <- loan_amount - prnp
interest[i] <- intr
principal[i] <- prnp
balance[i] <- loan_amount
}
# Throw vectors into a table for easier use
library(tidyverse) # for data manipulation going forward
standard_schedule <- tibble(payment_number = 1:term,
interest,
principal,
balance)
# Print head of standard_schedule
library(knitr) # both libraries for printing tables
library(kableExtra)
standard_schedule %>%
# Format columns to display as dollars
modify_at(c("interest", "principal", "balance"), scales::dollar,
largest_with_cents = 1e+6) %>%
# Limit to first 10 payments
head(10) %>%
kable(booktabs = T) %>%
kable_styling()
# Pivot longer makes it easier to visualize,
# but isn't totally necessary
standard_schedule %>%
pivot_longer(cols = c("interest", "principal"),
names_to = "Payment Portion",
values_to = "amount") %>%
ggplot(aes(payment_number, amount, color = `Payment Portion`)) +
geom_line() +
# '#85bb65' is the color of $$$
scale_color_manual(values = c("red", "#85bb65")) +
# Change the theme for better appearance
theme_minimal() +
scale_y_continuous(labels = scales::dollar) +
labs(title = "Payment Portions of Monthly Mortgage")
# Filter for interest less than principal
standard_schedule %>%
filter(interest < principal) %>%
# Include only the first observation
head(1) %>%
#  Prettify for table
modify_at(c("interest", "principal", "balance"), scales::dollar,
largest_with_cents = 1e+6) %>%
kable(booktabs = T) %>%
kable_styling()
library(lubridate)
# Set first payment date
first_payment <- "2020-01-01"
# Add vector as variable to standard schedule
standard_schedule <- standard_schedule %>%
mutate(date = seq(from = ymd(first_payment), by = "month",
length.out = term)) %>%
select(date, everything())
standard_schedule %>%
modify_at(c("interest", "principal", "balance"), scales::dollar,
largest_with_cents = 1e+6) %>%
head(10) %>%
kable(booktabs = T) %>%
kable_styling()
loan_amount1 <- loan_amount
extra_monthly <- 100
interest1 <- principal1 <- extra <- balance1 <- bonus <- vector("numeric", term)
for (i in 1:term) {
intr1 <- loan_amount1 * monthly_rate
prnp1 <- total_PI - intr1
loan_amount1 <- loan_amount1 - prnp1 - extra_monthly - bonus[i]
extra_monthly[i] <- extra_monthly
interest1[i] <- intr1
principal1[i] <- prnp1
balance1[i] <- loan_amount1
}
updated_schedule <- tibble("Payment #" = 1:term,
date = seq(from = ymd(first_payment), by = "month",
length.out = term),
Interest = interest1,
Principal = principal1,
"Extra Monthly" = extra_monthly,
Balance = balance1)
View(updated_schedule)
loan_amount1 <- 150000
extra_monthly <- 100
interest1 <- principal1 <- extra <- balance1 <- bonus <- vector("numeric", term)
for (i in 1:term) {
intr1 <- loan_amount1 * monthly_rate
prnp1 <- total_PI - intr1
loan_amount1 <- loan_amount1 - prnp1 - extra_monthly - bonus[i]
extra_monthly[i] <- extra_monthly
interest1[i] <- intr1
principal1[i] <- prnp1
balance1[i] <- loan_amount1
}
for (i in 1:term) {
intr1 <- loan_amount1 * monthly_rate
prnp1 <- total_PI - intr1
loan_amount1 <- loan_amount1 - prnp1 - extra_monthly
extra_monthly[i] <- extra_monthly
interest1[i] <- intr1
principal1[i] <- prnp1
balance1[i] <- loan_amount1
}
View(updated_schedule)
View(standard_schedule)
View(updated_schedule)
loan_amount1 <- 150000
interest1 <- principal1 <- extra <- balance1 <- bonus <- vector("numeric", term)
for (i in 1:term) {
intr1 <- loan_amount1 * monthly_rate
prnp1 <- total_PI - intr1
loan_amount1 <- loan_amount1 - prnp1 - extra_monthly
extra_monthly[i] <- extra_monthly
interest1[i] <- intr1
principal1[i] <- prnp1
balance1[i] <- loan_amount1
}
View(updated_schedule)
# Initialize the vectors as numeric with a length equal
# to the term of the loan.
balance <- loan_amount
interest <- principal <- vector("numeric", term)
for (i in 1:term) {
intr <- loan_amount * monthly_rate
prnp <- total_PI - intr
balance <- balance - prnp
interest[i] <- intr
principal[i] <- prnp
balance[i] <- loan_amount
}
balance1 <- loan_amount
extra_monthly <- 100
interest1 <- principal1 <- extra <- vector("numeric", term)
for (i in 1:term) {
intr1 <- loan_amount * monthly_rate
prnp1 <- total_PI - intr1
balance1 <- balance1 - prnp1 - extra_monthly
extra_monthly[i] <- extra_monthly
interest1[i] <- intr1
principal1[i] <- prnp1
balance1[i] <- balance1
}
View(updated_schedule)
knitr::opts_chunk$set(message=FALSE, warning=FALSE)
# Define the variables
term <- 360 # 30 years in months
loan_amount <- 150000 # $150,000 loan
annual_rate <- 0.04 # 4% interest rate
monthly_rate <- annual_rate/12 # rate converted to monthly rate
# Formula to calculate monthly
# principal + interest payment
total_PI <- loan_amount *
(monthly_rate * (1 + monthly_rate) ^ term)/
(((1 + monthly_rate) ^ term) - 1)
# Initialize the vectors as numeric with a length equal
# to the term of the loan.
balance <- loan_amount
interest <- principal <- vector("numeric", term)
# For loop to calculate values for each payment
for (i in 1:term) {
intr <- balance * monthly_rate
prnp <- total_PI - intr
balance <- balance - prnp
interest[i] <- intr
principal[i] <- prnp
balance[i] <- balance
}
# Throw vectors into a table for easier use
library(tidyverse) # for data manipulation going forward
standard_schedule <- tibble(payment_number = 1:term,
interest,
principal,
balance)
# Print head of standard_schedule
library(knitr) # both libraries for printing tables
library(kableExtra)
standard_schedule %>%
# Format columns to display as dollars
modify_at(c("interest", "principal", "balance"), scales::dollar,
largest_with_cents = 1e+6) %>%
# Limit to first 10 payments
head(10) %>%
kable(booktabs = T) %>%
kable_styling()
# Pivot longer makes it easier to visualize,
# but isn't totally necessary
standard_schedule %>%
pivot_longer(cols = c("interest", "principal"),
names_to = "Payment Portion",
values_to = "amount") %>%
ggplot(aes(payment_number, amount, color = `Payment Portion`)) +
geom_line() +
# '#85bb65' is the color of $$$
scale_color_manual(values = c("red", "#85bb65")) +
# Change the theme for better appearance
theme_minimal() +
scale_y_continuous(labels = scales::dollar) +
labs(title = "Payment Portions of Monthly Mortgage")
# Filter for interest less than principal
standard_schedule %>%
filter(interest < principal) %>%
# Include only the first observation
head(1) %>%
#  Prettify for table
modify_at(c("interest", "principal", "balance"), scales::dollar,
largest_with_cents = 1e+6) %>%
kable(booktabs = T) %>%
kable_styling()
library(lubridate)
# Set first payment date
first_payment <- "2020-01-01"
# Add vector as variable to standard schedule
standard_schedule <- standard_schedule %>%
mutate(date = seq(from = ymd(first_payment), by = "month",
length.out = term)) %>%
select(date, everything())
standard_schedule %>%
modify_at(c("interest", "principal", "balance"), scales::dollar,
largest_with_cents = 1e+6) %>%
head(10) %>%
kable(booktabs = T) %>%
kable_styling()
balance1 <- loan_amount
extra_monthly <- 100
interest1 <- principal1 <- extra <- vector("numeric", term)
for (i in 1:term) {
intr1 <- balance1 * monthly_rate
prnp1 <- total_PI - intr1
balance1 <- balance1 - prnp1 - extra_monthly
extra_monthly[i] <- extra_monthly
interest1[i] <- intr1
principal1[i] <- prnp1
balance1[i] <- balance1
}
View(standard_schedule)
updated_schedule <- tibble(date = seq(from = ymd(first_payment), by = "month",
length.out = term),
"Payment #" = 1:term,
Interest = interest1,
Principal = principal1,
"Extra Monthly" = extra_monthly,
Balance = balance1)
View(updated_schedule)
term <- 360 # 30 years in months
loan_amount <- 150000 # $150,000 loan
annual_rate <- 0.04 # 4% interest rate
monthly_rate <- annual_rate/12 # rate converted to monthly rate
total_PI <- loan_amount *
(monthly_rate * (1 + monthly_rate) ^ term)/
(((1 + monthly_rate) ^ term) - 1)
# Initialize the vectors as numeric with a length equal
# to the term of the loan.
balance <- loan_amount
interest <- principal <- vector("numeric", term)
for (i in 1:term) {
intr <- balance * monthly_rate
prnp <- total_PI - intr
balance <- balance - prnp
interest[i] <- intr
principal[i] <- prnp
balance[i] <- balance
}
library(tidyverse) # for data manipulation going forward
standard_schedule <- tibble(payment_number = 1:term,
interest,
principal,
balance)
View(standard_schedule)
blogdown:::serve_site()
knitr::opts_chunk$set(message=FALSE, warning=FALSE)
# Define the variables
term <- 360 # 30 years in months
original_loan_amount <- 150000 # $150,000 loan
annual_rate <- 0.04 # 4% interest rate
monthly_rate <- annual_rate/12 # rate converted to monthly rate
# Formula to calculate monthly
# principal + interest payment
total_PI <- loan_amount *
(monthly_rate * (1 + monthly_rate) ^ term)/
(((1 + monthly_rate) ^ term) - 1)
knitr::opts_chunk$set(message=FALSE, warning=FALSE)
# Define the variables
term <- 360 # 30 years in months
original_loan_amount <- 150000 # $150,000 loan
annual_rate <- 0.04 # 4% interest rate
monthly_rate <- annual_rate/12 # rate converted to monthly rate
# Formula to calculate monthly
# principal + interest payment
total_PI <- original_loan_amount *
(monthly_rate * (1 + monthly_rate) ^ term)/
(((1 + monthly_rate) ^ term) - 1)
# Initialize the vectors as numeric with a length equal
# to the term of the loan.
interest <- principal <- balance <- date <- vector("numeric", term)
loan_amount <- original_loan_amount
# For loop to calculate values for each payment
for (i in 1:term) {
intr <- loan_amount * monthly_rate
prnp <- total_PI - intr
loan_amount <- loan_amount - prnp
interest[i] <- intr
principal[i] <- prnp
balance[i] <- loan_amount
}
# Throw vectors into a table for easier use
library(tidyverse) # for data manipulation going forward
standard_schedule <- tibble(payment_number = 1:term,
interest,
principal,
balance)
# Print head of standard_schedule
library(knitr) # both libraries for printing tables
library(kableExtra)
standard_schedule %>%
# Format columns to display as dollars
modify_at(c("interest", "principal", "balance"), scales::dollar,
largest_with_cents = 1e+6) %>%
# Limit to first 10 payments
head(10) %>%
kable(booktabs = T) %>%
kable_styling()
# Pivot longer makes it easier to visualize,
# but isn't totally necessary
standard_schedule %>%
pivot_longer(cols = c("interest", "principal"),
names_to = "Payment Portion",
values_to = "amount") %>%
ggplot(aes(payment_number, amount, color = `Payment Portion`)) +
geom_line() +
# '#85bb65' is the color of $$$
scale_color_manual(values = c("red", "#85bb65")) +
# Change the theme for better appearance
theme_minimal() +
scale_y_continuous(labels = scales::dollar) +
labs(title = "Payment Portions of Monthly Mortgage")
# Filter for interest less than principal
standard_schedule %>%
filter(interest < principal) %>%
# Include only the first observation
head(1) %>%
#  Prettify for table
modify_at(c("interest", "principal", "balance"), scales::dollar,
largest_with_cents = 1e+6) %>%
kable(booktabs = T) %>%
kable_styling()
library(lubridate)
# Set first payment date
first_payment <- "2020-01-01"
# Add vector as variable to standard schedule
standard_schedule <- standard_schedule %>%
mutate(date = seq(from = ymd(first_payment), by = "month",
length.out = term)) %>%
select(date, everything())
standard_schedule %>%
modify_at(c("interest", "principal", "balance"), scales::dollar,
largest_with_cents = 1e+6) %>%
head(10) %>%
kable(booktabs = T) %>%
kable_styling()
loan_amount1 <- original_loan_amount
interest1 <- principal1 <- extra <- balance1 <- bonus <- vector("numeric", term)
extra <- 100
for (i in 1:term) {
intr1 <- loan_amount1 * monthly_rate
prnp1 <- total_PI - intr1
loan_amount1 <- loan_amount1 - prnp1 - extra - bonus[i]
extra[i] <- extra
interest1[i] <- intr1
principal1[i] <- prnp1
balance1[i] <- loan_amount1
}
View(standard_schedule)
updated_schedule <- tibble(payment_number = 1:term,
interest1,
principal1,
extra,
balance1)
View(updated_schedule)
payment_number = 1:term,
updated_schedule <- tibble(date = seq(from = ymd(first_payment), by = "month",
length.out = term),
payment_number = 1:term,
interest1,
principal1,
extra,
balance1)
View(updated_schedule)
