<<<<<<< HEAD
summarise(total = n()) %>%
ggplot(aes(day, total)) +
# set alpha below 1 to show overplotting
geom_point(alpha = 0.5) +
geom_text(data = labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
mutate(label = ifelse(total == max(total), day, "")),
aes(label = label, y = total, x = format(day, "%b %d, %Y"))
labeled %>%
labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
ggplot(aes(day, total)) +
# set alpha below 1 to show overplotting
geom_point(alpha = 0.5) +
geom_text(data = labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
mutate(label = ifelse(total == max(total), day, "")),
aes(label = label, y = total, x = format(day, "%b %d, %Y")))
labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
ggplot(aes(day, total)) +
# set alpha below 1 to show overplotting
geom_point(alpha = 0.5) +
geom_text(data = labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
mutate(label = ifelse(total == max(total), day, "")),
aes(label = label, y = total, x = date(day)))
max_label <- labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
mutate(label = ifelse(total == max(total), day, ""))
glimpse(max_label)
max_label <- labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
mutate(label = ifelse(total == max(total), day, ""))
d_point_v <-labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
ggplot(aes(day, total)) +
# set alpha below 1 to show overplotting
geom_point(alpha = 0.5) +
geom_text(data = max_label,
aes(label = date(label), y = total, x = day))
d_point_v
labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
ggplot(aes(day, total)) +
# set alpha below 1 to show overplotting
geom_point(alpha = 0.5) +
geom_text(data = max_label,
aes(label = as_date(label), y = total, x = day))
max_label <- labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
mutate(label = ifelse(total == max(total), day, ""))
d_point_v <-labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
ggplot(aes(day, total)) +
# set alpha below 1 to show overplotting
geom_point(alpha = 0.5) +
geom_text(data = max_label,
aes(label = as_date(label), y = total, x = day)) +
geom_smooth(se = FALSE, color = "red", size = 0.5) +
# geom_smooth will extend below zero if we don't set limits
scale_y_continuous(limits = c(0, 130)) +
theme_minimal() +
labs(x ="", y = "Daily Count of Accidents", title = "Milwaukee Traffic Accident Reports",
subtitle = "Each point represents a daily total",
caption = "Source: data.milwaukee.gov.")
d_point_v
max_label
max_label %>% arrange(desc(total))
max_label <- labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
filter(max(total))
max_label <- labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
filter(total == max(total))
max_label
d_point_v <-labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
ggplot(aes(day, total)) +
# set alpha below 1 to show overplotting
geom_point(alpha = 0.5) +
geom_text(data = max_label,
aes(label = date(day), y = total, x = day)) +
geom_smooth(se = FALSE, color = "red", size = 0.5) +
# geom_smooth will extend below zero if we don't set limits
scale_y_continuous(limits = c(0, 130)) +
theme_minimal() +
labs(x ="", y = "Daily Count of Accidents", title = "Milwaukee Traffic Accident Reports",
subtitle = "Each point represents a daily total",
caption = "Source: data.milwaukee.gov.")
d_point_v
d_point_v <-labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
ggplot(aes(day, total)) +
# set alpha below 1 to show overplotting
geom_point(alpha = 0.5) +
geom_text(data = max_label,
aes(label = date(day), y = total, x = day), nudge_y = 1) +
geom_smooth(se = FALSE, color = "red", size = 0.5) +
# geom_smooth will extend below zero if we don't set limits
scale_y_continuous(limits = c(0, 130)) +
theme_minimal() +
labs(x ="", y = "Daily Count of Accidents", title = "Milwaukee Traffic Accident Reports",
subtitle = "Each point represents a daily total",
caption = "Source: data.milwaukee.gov.")
d_point_v
d_point_v <-labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
ggplot(aes(day, total)) +
# set alpha below 1 to show overplotting
geom_point(alpha = 0.5) +
geom_text(data = max_label,
aes(label = date(day), y = total, x = day), nudge_y = 10) +
geom_smooth(se = FALSE, color = "red", size = 0.5) +
# geom_smooth will extend below zero if we don't set limits
scale_y_continuous(limits = c(0, 130)) +
theme_minimal() +
labs(x ="", y = "Daily Count of Accidents", title = "Milwaukee Traffic Accident Reports",
subtitle = "Each point represents a daily total",
caption = "Source: data.milwaukee.gov.")
d_point_v
d_point_v <-labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
ggplot(aes(day, total)) +
# set alpha below 1 to show overplotting
geom_point(alpha = 0.5) +
geom_text(data = max_label,
aes(label = date(day), y = total, x = day), nudge_y = 3) +
geom_smooth(se = FALSE, color = "red", size = 0.5) +
# geom_smooth will extend below zero if we don't set limits
scale_y_continuous(limits = c(0, 130)) +
theme_minimal() +
labs(x ="", y = "Daily Count of Accidents", title = "Milwaukee Traffic Accident Reports",
subtitle = "Each point represents a daily total",
caption = "Source: data.milwaukee.gov.")
d_point_v
d_point_v <-labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
ggplot(aes(day, total)) +
# set alpha below 1 to show overplotting
geom_point(alpha = 0.5) +
geom_text(data = max_label,
aes(label = date(day), y = total, x = day), nudge_y = 5) +
geom_smooth(se = FALSE, color = "red", size = 0.5) +
# geom_smooth will extend below zero if we don't set limits
scale_y_continuous(limits = c(0, 130)) +
theme_minimal() +
labs(x ="", y = "Daily Count of Accidents", title = "Milwaukee Traffic Accident Reports",
subtitle = "Each point represents a daily total",
caption = "Source: data.milwaukee.gov.")
d_point_v
d_point_v <-labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
ggplot(aes(day, total)) +
# set alpha below 1 to show overplotting
geom_point(alpha = 0.5) +
geom_text(data = max_label,
aes(label = date(day), y = total, x = day), nudge_y = 7) +
geom_smooth(se = FALSE, color = "red", size = 0.5) +
# geom_smooth will extend below zero if we don't set limits
scale_y_continuous(limits = c(0, 130)) +
theme_minimal() +
labs(x ="", y = "Daily Count of Accidents", title = "Milwaukee Traffic Accident Reports",
subtitle = "Each point represents a daily total",
caption = "Source: data.milwaukee.gov.")
d_point_v
d_point_v <-labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
ggplot(aes(day, total)) +
# set alpha below 1 to show overplotting
geom_point(alpha = 0.5) +
geom_text(data = max_label,
aes(label = format(date(day), "%b %d, %Y"), y = total, x = day), nudge_y = 7) +
geom_smooth(se = FALSE, color = "red", size = 0.5) +
# geom_smooth will extend below zero if we don't set limits
scale_y_continuous(limits = c(0, 130)) +
theme_minimal() +
labs(x ="", y = "Daily Count of Accidents", title = "Milwaukee Traffic Accident Reports",
subtitle = "Each point represents a daily total",
caption = "Source: data.milwaukee.gov.")
d_point_v
max_label <- labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
head(n = 5)
d_point_v <-labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
ggplot(aes(day, total)) +
# set alpha below 1 to show overplotting
geom_point(alpha = 0.5) +
geom_text(data = max_label,
aes(label = format(date(day), "%b %d, %Y"), y = total, x = day), nudge_y = 7) +
geom_smooth(se = FALSE, color = "red", size = 0.5) +
# geom_smooth will extend below zero if we don't set limits
scale_y_continuous(limits = c(0, 130)) +
theme_minimal() +
labs(x ="", y = "Daily Count of Accidents", title = "Milwaukee Traffic Accident Reports",
subtitle = "Each point represents a daily total",
caption = "Source: data.milwaukee.gov.")
d_point_v
max_label <- labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
arrange(desc(total)) %>%
head(n = 5)
d_point_v <-labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
ggplot(aes(day, total)) +
# set alpha below 1 to show overplotting
geom_point(alpha = 0.5) +
geom_text(data = max_label,
aes(label = format(date(day), "%b %d, %Y"), y = total, x = day), nudge_y = 7) +
geom_smooth(se = FALSE, color = "red", size = 0.5) +
# geom_smooth will extend below zero if we don't set limits
scale_y_continuous(limits = c(0, 130)) +
theme_minimal() +
labs(x ="", y = "Daily Count of Accidents", title = "Milwaukee Traffic Accident Reports",
subtitle = "Each point represents a daily total",
caption = "Source: data.milwaukee.gov.")
d_point_v
max_label <- labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
arrange(desc(total)) %>%
head(n = 5) %>%
mutate(day = wday(day))
max_label
d_point_v <-labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
ggplot(aes(day, total)) +
# set alpha below 1 to show overplotting
geom_point(alpha = 0.5) +
geom_text(data = max_label,
aes(label = paste(day, format(date(day), "%b %d, %Y"), sep = "\n"), y = total, x = day), nudge_y = 7) +
geom_smooth(se = FALSE, color = "red", size = 0.5) +
# geom_smooth will extend below zero if we don't set limits
scale_y_continuous(limits = c(0, 130)) +
theme_minimal() +
labs(x ="", y = "Daily Count of Accidents", title = "Milwaukee Traffic Accident Reports",
subtitle = "Each point represents a daily total",
caption = "Source: data.milwaukee.gov.")
d_point_v
max_label <- labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
arrange(desc(total)) %>%
head(n = 5) %>%
mutate(weekday = wday(day))
d_point_v <-labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
ggplot(aes(day, total)) +
# set alpha below 1 to show overplotting
geom_point(alpha = 0.5) +
geom_text(data = max_label,
aes(label = paste(weekday, format(date(day), "%b %d, %Y"), sep = "\n"), y = total, x = day), nudge_y = 7) +
geom_smooth(se = FALSE, color = "red", size = 0.5) +
# geom_smooth will extend below zero if we don't set limits
scale_y_continuous(limits = c(0, 130)) +
theme_minimal() +
labs(x ="", y = "Daily Count of Accidents", title = "Milwaukee Traffic Accident Reports",
subtitle = "Each point represents a daily total",
caption = "Source: data.milwaukee.gov.")
d_point_v
?format
max_label <- labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
arrange(desc(total)) %>%
head(n = 5) %>%
mutate(weekday = wday(day))
d_point_v <-labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
ggplot(aes(day, total)) +
# set alpha below 1 to show overplotting
geom_point(alpha = 0.5) +
geom_text(data = max_label,
aes(label = paste(format(weekday, "%a"), format(date(day), "%b %d, %Y"), sep = "\n"), y = total, x = day), nudge_y = 7) +
geom_smooth(se = FALSE, color = "red", size = 0.5) +
# geom_smooth will extend below zero if we don't set limits
scale_y_continuous(limits = c(0, 130)) +
theme_minimal() +
labs(x ="", y = "Daily Count of Accidents", title = "Milwaukee Traffic Accident Reports",
subtitle = "Each point represents a daily total",
caption = "Source: data.milwaukee.gov.")
d_point_v
d_point_v <-labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
ggplot(aes(day, total)) +
# set alpha below 1 to show overplotting
geom_point(alpha = 0.5) +
geom_text(data = max_label,
aes(label = paste(format(weekday, "%a"), format(date(day), "%b %d, %Y"), sep = " "), y = total, x = day), nudge_y = 7) +
geom_smooth(se = FALSE, color = "red", size = 0.5) +
# geom_smooth will extend below zero if we don't set limits
scale_y_continuous(limits = c(0, 130)) +
theme_minimal() +
labs(x ="", y = "Daily Count of Accidents", title = "Milwaukee Traffic Accident Reports",
subtitle = "Each point represents a daily total",
caption = "Source: data.milwaukee.gov.")
d_point_v
d_point_v <-labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
ggplot(aes(day, total)) +
# set alpha below 1 to show overplotting
geom_point(alpha = 0.5) +
geom_text(data = max_label,
aes(label = format(date(day), "%a, %b %d, %Y"), y = total, x = day), nudge_y = 7) +
geom_smooth(se = FALSE, color = "red", size = 0.5) +
# geom_smooth will extend below zero if we don't set limits
scale_y_continuous(limits = c(0, 130)) +
theme_minimal() +
labs(x ="", y = "Daily Count of Accidents", title = "Milwaukee Traffic Accident Reports",
subtitle = "Each point represents a daily total",
caption = "Source: data.milwaukee.gov.")
d_point_v
max_label <- labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
arrange(desc(total)) %>%
head(n = 5) %>%
mutate(weekday = wday(day))
max_label
mutate(weekday = format(wday(day), "%a")
max_label <- labeled %>%
max_label <- labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
arrange(desc(total)) %>%
head(n = 5) %>%
mutate(weekday = format(wday(day), "%a"))
max_label <- labeled %>%
group_by(day = floor_date(CASEDATE, "day")) %>%
summarise(total = n()) %>%
arrange(desc(total)) %>%
head(n = 5) %>%
mutate(weekday = format(day, "%a"))
max_label
View(max_label)
d_point_v
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
servr::daemon_stop(1)
blogdown::serve_site()
bookdown:::mathquill()
bookdown:::mathquill()
?purl
?knitr::purl
knitr::purl("content/post/amortization_calculator/initial_post/index.Rmarkdown","content/post/amortization_calculator/initial_post/script.R", 2)
knitr::purl("content/post/amortization_calculator/initial_post/index.Rmarkdown","content/post/amortization_calculator/initial_post/script.R")
blogdown:::new_post_addin()
blogdown:::serve_site()
runApp('~/Documents/GitRepo/mortgage_calculator/shiny_app')
dummy <- data.frame(ID = c(rep("A", 10),
rep("B", 10),
rep("C", 10)),
code = c(rep(NA_character_,6),
"10",
rep("9", 3),
rep("4", 4),
rep("10",2),
rep("2", 3),
"11",
rep("1", 7),
rep("5", 3)))
dummy <-
dummy %>%
group_by(ID) %>%
mutate(time = seq_along(ID))
dummy_2 <-
dummy %>%
group_by(ID) %>%
mutate(time = seq_along(ID))
dummy_2 <-
dummy_2 %>%
pivot_wider(names_from = time,
values_from = code, names_prefix = 'time_')
View(dummy)
View(dummy_2)
dummy %>%
group_by(ID) %>%
mutate(category =
if_else( (time == max(time) & code == "11") & (10 %in% code),
Category_B,
FALSE)) %>%
View()
dummy %>%
group_by(ID) %>%
mutate(category =
if_else( (time == max(time) & code == "11") & (10 %in% code),
"Category_B",
FALSE)) %>%
View()
dummy %>%
group_by(ID) %>%
mutate(category =
if_else( (time == max(time) & code == "11") & (10 %in% code),
"Category_B",
FALSE))
dummy %>%
group_by(ID) %>%
mutate(category =
if_else( (time == max(time) & code == "11") & (10 %in% code),
"Category_B",
"FALSE"))
test <- dummy %>%
group_by(ID) %>%
mutate(category =
if_else( (time == max(time) & code == "11") & (10 %in% code),
"Category_B",
"FALSE"))
View(test)
?broom
str(mtcars)
mod <- lm(mpg ~ cyl, data = mtcars)
broom::tidy(mod)
broom::augment_columns(mod)
broom::augment_columns(mod, mtcars)
x <- 5
View(test)
test %>% mutate(test = ifelse(time %in% c(1, 2, 3), 1, 2))
test %>% mutate(test = ifelse(time == 1|2|3, 1, 2))
?ifelse
1 == 1|2|3
1 == 2|3
1 == 2 | 1 == 3
2|3
2||3
2&3
isTRUE(1)
isTRUE(2)
isTRUE(TRUE)
?|
"red"|"blue"
1|TRUE
5|TRUE
5|8
0|1
5&4
0&1
isTRUE(5)
1010 == TRUE
10011|10021|10021
ID == 10011|10021|10021
"ID" == 10011|10021|10021
str(mtcars)
row.names(mtcars)
filter(mtcars, rownames(mtcars) == "Mazda RX4")
filter(mtcars, row.names(mtcars) == "Mazda RX4")
dfs <- list("a", "b", "c")
length(dfs)
dfs[1]
?lm
balance/payment
balance <- 3815.83
payment <- 199.85
balance/payment
seq(from = balance, to = 0, by = payment)
seq(from = balance, to = 0, by = 1)
seq(from = balance, to = 0)
seq(from = balance, to = 0, by = -payment)
dates <- seq.Date(from = "2020-05-09", by = "month", length.out = length(payments))
dates <- seq.Date(from = lubridate::ymd("2020-05-09"), by = "month", length.out = length(payments))
payments <- seq(from = balance, to = 0, by = -payment)
dates <- seq.Date(from = lubridate::ymd("2020-05-09"), by = "month", length.out = length(payments))
dates
iris %>%
pivot_longer(cols = c(2:3), names_to = "1", values_to = "3")
?append
append("x", "a")
c("x", "a")
c("x", "a") == append("x", "a")
?c
?append
quantile(mtcars$mpg, probs = c(.05, .95))
?IQR
?case_when
case_when(1 > 2 ~ TRUE)
x <- 1:50
case_when(
x %% 35 == 0 ~ "fizz buzz",
x %% 5 == 0 ~ "fizz",
x %% 7 == 0 ~ "buzz",
TRUE ~ as.character(x)
)
=======
pivot_wider(names_from = ReportedYear, values_from = total) %>%
mutate(per_last_year = `2020` / `2019`) %>%
ggplot(aes(ReportedMonth, per_last_year)) +
geom_col() +
facet_wrap(~ crime)
long_crime %>%
group_by(ReportedYear, ReportedMonth, crime) %>%
summarise(total = sum(indicator)) %>%
filter(ReportedMonth <= 4) %>%
modify_at("ReportedYear", factor) %>%
pivot_wider(names_from = ReportedYear, values_from = total) %>%
mutate(per_last_year = `2020` / `2019`) %>%
ggplot(aes(ReportedMonth, per_last_year)) +
geom_col() +
facet_wrap(~ crime) +
scale_y_continuous(labels = scales::percent())
scale_y_continuous(labels = scales::percent
long_crime %>%
long_crime %>%
group_by(ReportedYear, ReportedMonth, crime) %>%
summarise(total = sum(indicator)) %>%
filter(ReportedMonth <= 4) %>%
modify_at("ReportedYear", factor) %>%
pivot_wider(names_from = ReportedYear, values_from = total) %>%
mutate(per_last_year = `2020` / `2019`) %>%
ggplot(aes(ReportedMonth, per_last_year)) +
geom_col() +
facet_wrap(~ crime) +
scale_y_continuous(labels = scales::percent)
long_crime %>%
group_by(ReportedYear, ReportedMonth, crime) %>%
summarise(total = sum(indicator)) %>%
filter(ReportedMonth <= 4) %>%
modify_at("ReportedYear", factor) %>%
pivot_wider(names_from = ReportedYear, values_from = total) %>%
mutate(per_last_year = `2020` / `2019`) %>%
ggplot(aes(ReportedMonth, per_last_year)) +
geom_hline(yintercept = 1, color = "red") +
geom_col() +
theme_minimal() +
facet_wrap(~ crime) +
scale_y_continuous(labels = scales::percent)
long_crime %>%
group_by(ReportedYear, ReportedMonth, crime) %>%
summarise(total = sum(indicator)) %>%
filter(ReportedMonth <= 4) %>%
modify_at("ReportedYear", factor) %>%
pivot_wider(names_from = ReportedYear, values_from = total) %>%
mutate(per_last_year = `2020` / `2019`)
year_days <- long_crime %>%
mutate(year_day = yday(ReportedDateTime)) %>%
group_by(crime, year_day, year) %>%
summarise(day_total = sum(indicator)) %>%
ungroup() %>%
group_by(crime, year) %>%
mutate(cum_ann_total = cumsum(day_total))
year_days <- long_crime %>%
mutate(year_day = yday(ReportedDateTime)) %>%
group_by(crime, year_day, ReportedYear) %>%
summarise(day_total = sum(indicator)) %>%
ungroup() %>%
group_by(crime, year) %>%
mutate(cum_ann_total = cumsum(day_total))
year_days <- long_crime %>%
mutate(year_day = yday(ReportedDateTime)) %>%
group_by(crime, year_day, ReportedYear) %>%
summarise(day_total = sum(indicator)) %>%
ungroup() %>%
group_by(crime, ReportedYear) %>%
mutate(cum_ann_total = cumsum(day_total))
View(year_days)
year_days <- long_crime %>%
mutate(year_day = yday(ReportedDateTime)) %>%
group_by(crime, year_day, ReportedYear) %>%
summarise(day_total = sum(indicator)) %>%
ungroup() %>%
group_by(crime, ReportedYear) %>%
mutate(cum_ann_total = cumsum(day_total),
final_ann_total = max(day_total))
year_days <- long_crime %>%
mutate(year_day = yday(ReportedDateTime)) %>%
group_by(crime, year_day, ReportedYear) %>%
summarise(day_total = sum(indicator)) %>%
ungroup() %>%
group_by(crime, ReportedYear) %>%
mutate(cum_ann_total = cumsum(day_total),
final_ann_total = max(cum_ann_total))
model <- lm(final_ann_total ~ cum_ann_total*year_day)
model <- lm(final_ann_total ~ cum_ann_total*year_day, data = year_days)
summary(model)
model <- lm(final_ann_total ~ cum_ann_total:year_day, data = year_days)
summary(model)
model <- lm(final_ann_total ~ cum_ann_total + year_day, data = year_days)
summary(model)
model <- lm(final_ann_total ~ cum_ann_total + factor(year_day), data = year_days)
summary(model)
model <- lm(final_ann_total ~ cum_ann_total + year_day, data = year_days)
summary(model)
model <- lm(final_ann_total ~ cum_ann_total + year_day, data = year_days %>% filter(crime == "Homicide"))
summary(model)
year_days <- crime %>%
pivot_longer(cols = c(15:24), names_to = "crime", values_to = "indicator") %>%
filter(indicator == 1) %>%
mutate(year_day = yday(ReportedDateTime)) %>%
group_by(crime, year_day, ReportedYear) %>%
summarise(day_total = sum(indicator)) %>%
ungroup() %>%
group_by(crime, ReportedYear) %>%
mutate(cum_ann_total = cumsum(day_total),
final_ann_total = max(cum_ann_total))
model <- lm(final_ann_total ~ cum_ann_total + year_day, data = year_days %>% filter(crime == "Homicide"))
summary(model)
year_days <- crime %>%
pivot_longer(cols = c(15:24), names_to = "crime", values_to = "indicator") %>%
filter(indicator == 1 & ReportedYear < 2020) %>%
mutate(year_day = yday(ReportedDateTime)) %>%
group_by(crime, year_day, ReportedYear) %>%
summarise(day_total = sum(indicator)) %>%
ungroup() %>%
group_by(crime, ReportedYear) %>%
mutate(cum_ann_total = cumsum(day_total),
final_ann_total = max(cum_ann_total))
model <- lm(final_ann_total ~ cum_ann_total + year_day, data = year_days %>% filter(crime == "Homicide"))
?predict
View(long_crime)
today <- crime %>%
pivot_longer(cols = c(15:24), names_to = "crime", values_to = "indicator") %>%
filter(indicator == 1 & ReportedYear < 2020) %>%
mutate(year_day = yday(ReportedDateTime)) %>%
group_by(crime, year_day, ReportedYear) %>%
summarise(day_total = sum(indicator)) %>%
ungroup() %>%
group_by(crime, ReportedYear) %>%
mutate(cum_ann_total = cumsum(day_total)) %>%
filter(year_day == yday(ymd(Sys.Date())))
View(today)
today <- crime %>%
pivot_longer(cols = c(15:24), names_to = "crime", values_to = "indicator") %>%
filter(indicator == 1 & ReportedYear < 2020) %>%
mutate(year_day = yday(ReportedDateTime)) %>%
group_by(crime, year_day, ReportedYear) %>%
summarise(day_total = sum(indicator)) %>%
ungroup() %>%
group_by(crime, ReportedYear) %>%
mutate(cum_ann_total = cumsum(day_total)) %>%
filter(year_day == yday(ymd(Sys.Date()))) %>%
select(-day_total)
today <- crime %>%
pivot_longer(cols = c(15:24), names_to = "crime", values_to = "indicator") %>%
filter(indicator == 1 & ReportedYear < 2020) %>%
mutate(year_day = yday(ReportedDateTime)) %>%
group_by(crime, year_day, ReportedYear) %>%
summarise(day_total = sum(indicator)) %>%
ungroup() %>%
group_by(crime, ReportedYear) %>%
mutate(cum_ann_total = cumsum(day_total)) %>%
filter(year_day == yday(ymd(Sys.Date()))) %>%
select(-day_total,
today_total = cum_ann_total)
year_days <- crime %>%
pivot_longer(cols = c(15:24), names_to = "crime", values_to = "indicator") %>%
filter(indicator == 1 & ReportedYear < 2020) %>%
mutate(year_day = yday(ReportedDateTime)) %>%
group_by(crime, year_day, ReportedYear) %>%
summarise(day_total = sum(indicator)) %>%
ungroup() %>%
group_by(crime, ReportedYear) %>%
mutate(cum_ann_total = cumsum(day_total),
final_ann_total = max(cum_ann_total)) %>%
left_join(., today)
today <- crime %>%
pivot_longer(cols = c(15:24), names_to = "crime", values_to = "indicator") %>%
filter(indicator == 1 & ReportedYear < 2020) %>%
mutate(year_day = yday(ReportedDateTime)) %>%
group_by(crime, year_day, ReportedYear) %>%
summarise(day_total = sum(indicator)) %>%
ungroup() %>%
group_by(crime, ReportedYear) %>%
mutate(cum_ann_total = cumsum(day_total)) %>%
filter(year_day == yday(ymd(Sys.Date()))) %>%
select(-c(day_total, year_day),
today_total = cum_ann_total)
year_days <- crime %>%
pivot_longer(cols = c(15:24), names_to = "crime", values_to = "indicator") %>%
filter(indicator == 1 & ReportedYear < 2020 & year_day <= yday(ymd(Sys.Date()))) %>%
mutate(year_day = yday(ReportedDateTime)) %>%
group_by(crime, year_day, ReportedYear) %>%
summarise(day_total = sum(indicator)) %>%
ungroup() %>%
group_by(crime, ReportedYear) %>%
mutate(cum_ann_total = cumsum(day_total),
final_ann_total = max(cum_ann_total)) %>%
left_join(., today)
year_days <- crime %>%
pivot_longer(cols = c(15:24), names_to = "crime", values_to = "indicator") %>%
mutate(year_day = yday(ReportedDateTime)) %>%
filter(indicator == 1 & ReportedYear < 2020 & year_day <= yday(ymd(Sys.Date()))) %>%
group_by(crime, year_day, ReportedYear) %>%
summarise(day_total = sum(indicator)) %>%
ungroup() %>%
group_by(crime, ReportedYear) %>%
mutate(cum_ann_total = cumsum(day_total),
final_ann_total = max(cum_ann_total)) %>%
left_join(., today)
model <- lm(final_ann_total ~ cum_ann_total + year_day, data = year_days %>% filter(crime == "Homicide"))
summary(model)
crime %>%
pivot_longer(cols = c(15:24), names_to = "crime", values_to = "indicator") %>%
mutate(year_day = yday(ReportedDateTime)) %>%
filter(indicator == 1 & ReportedYear == 2020 & year_day == yday(ymd(Sys.Date()))) %>%
group_by(crime, year_day, ReportedYear) %>%
summarise(day_total = sum(indicator)) %>%
ungroup() %>%
group_by(crime, ReportedYear) %>%
mutate(cum_ann_total = cumsum(day_total),
final_ann_total = max(cum_ann_total))
crime_current %>% sum(Homicide)
crime_current %>% summarise(total = sum(Homicide))
crime %>%
pivot_longer(cols = c(15:24), names_to = "crime", values_to = "indicator") %>%
filter(indicator == 1 & ReportedYear == 2020) %>%
mutate(year_day = yday(ReportedDateTime)) %>%
group_by(crime, year_day, ReportedYear) %>%
summarise(day_total = sum(indicator)) %>%
ungroup() %>%
group_by(crime, ReportedYear) %>%
mutate(cum_ann_total = cumsum(day_total))
crime %>%
pivot_longer(cols = c(15:24), names_to = "crime", values_to = "indicator") %>%
filter(indicator == 1 & ReportedYear == 2020 & crime = Homicide) %>%
crime %>%
pivot_longer(cols = c(15:24), names_to = "crime", values_to = "indicator") %>%
filter(indicator == 1 & ReportedYear == 2020 & crime == "Homicide") %>%
mutate(year_day = yday(ReportedDateTime)) %>%
group_by(crime, year_day, ReportedYear) %>%
summarise(day_total = sum(indicator)) %>%
ungroup() %>%
group_by(crime, ReportedYear) %>%
mutate(cum_ann_total = cumsum(day_total))
filter(year_day == yday(ymd("2020-04-01"))
mutate(cum_ann_total = cumsum(day_total)) %>%
crime %>%
crime %>%
crime %>%
pivot_longer(cols = c(15:24), names_to = "crime", values_to = "indicator") %>%
filter(indicator == 1 & ReportedYear == 2020 & crime == "Homicide") %>%
mutate(year_day = yday(ReportedDateTime)) %>%
group_by(crime, year_day, ReportedYear) %>%
summarise(day_total = sum(indicator)) %>%
ungroup() %>%
group_by(crime, ReportedYear) %>%
mutate(cum_ann_total = cumsum(day_total)) %>%
filter(year_day == yday(ymd("2020-04-01")))
predict(model, year_day = yday(ymd("2020-04-01"), cum_ann_total = 25))
summary(model)
yday(ymd("2020-04-01")
predict(model, year_day = yday(ymd("2020-04-01")), cum_ann_total = 25)
yday(ymd("2020-04-01"))
predict(model, year_day = yday(ymd("2020-04-01")), cum_ann_total = 25)
26.8+1.26*25-.29*92
predict(model, tibble(year_day = yday(ymd("2020-04-01")), cum_ann_total = 25))
crime %>%
pivot_longer(cols = c(15:24), names_to = "crime", values_to = "indicator") %>%
filter(indicator == 1 & ReportedYear == 2020 & crime == "Homicide") %>%
mutate(year_day = yday(ReportedDateTime)) %>%
group_by(crime, year_day, ReportedYear) %>%
summarise(day_total = sum(indicator)) %>%
ungroup() %>%
group_by(crime, ReportedYear) %>%
mutate(cum_ann_total = cumsum(day_total))
crime %>%
pivot_longer(cols = c(15:24), names_to = "crime", values_to = "indicator") %>%
filter(indicator == 1 & ReportedYear == 2020 & crime == "Homicide") %>%
mutate(year_day = yday(ReportedDateTime)) %>%
group_by(crime, year_day, ReportedYear) %>%
summarise(day_total = sum(indicator)) %>%
ungroup() %>%
group_by(crime, ReportedYear) %>%
mutate(cum_ann_total = cumsum(day_total)) %>%
filter(year_day == yday(ymd("2020-03-25")))
crime %>%
pivot_longer(cols = c(15:24), names_to = "crime", values_to = "indicator") %>%
filter(indicator == 1 & ReportedYear == 2020) %>%
mutate(year_day = yday(ReportedDateTime)) %>%
group_by(crime, year_day, ReportedYear) %>%
summarise(day_total = sum(indicator)) %>%
ungroup() %>%
group_by(crime, ReportedYear) %>%
mutate(cum_ann_total = cumsum(day_total)) %>%
filter(year_day == yday(ymd("2020-03-25")))
crime %>%
pivot_longer(cols = c(15:24), names_to = "crime", values_to = "indicator") %>%
filter(ReportedYear == 2020) %>%
mutate(year_day = yday(ReportedDateTime)) %>%
group_by(crime, year_day, ReportedYear) %>%
summarise(day_total = sum(indicator)) %>%
ungroup() %>%
group_by(crime, ReportedYear) %>%
mutate(cum_ann_total = cumsum(day_total)) %>%
filter(year_day == yday(ymd("2020-03-25")))
predict(model, tibble(year_day = yday(ymd("2020-03-25")), cum_ann_total = 21))
model <- lm(final_ann_total ~ cum_ann_total*year_day, data = year_days %>% filter(crime == "Homicide"))
summary(model)
predict(model, tibble(year_day = yday(ymd("2020-03-25")), cum_ann_total = 21))
model <- lm(today_total ~ cum_ann_total*year_day, data = year_days %>% filter(crime == "Homicide"))
summary(model)
predict(model, tibble(year_day = yday(ymd("2020-03-25")), cum_ann_total = 21))
model <- lm(today_total ~ cum_ann_total+year_day, data = year_days %>% filter(crime == "Homicide"))
summary(model)
predict(model, tibble(year_day = yday(ymd("2020-03-25")), cum_ann_total = 21))
View(today)
today <- crime %>%
pivot_longer(cols = c(15:24), names_to = "crime", values_to = "indicator") %>%
filter(ReportedYear < 2020) %>%
mutate(year_day = yday(ReportedDateTime)) %>%
group_by(crime, year_day, ReportedYear) %>%
summarise(day_total = sum(indicator)) %>%
ungroup() %>%
group_by(crime, ReportedYear) %>%
mutate(cum_ann_total = cumsum(day_total)) %>%
filter(year_day == yday(ymd(Sys.Date()))) %>%
select(-c(day_total, year_day),
today_total = cum_ann_total)
year_days <- crime %>%
pivot_longer(cols = c(15:24), names_to = "crime", values_to = "indicator") %>%
mutate(year_day = yday(ReportedDateTime)) %>%
filter(ReportedYear < 2020 & year_day <= yday(ymd(Sys.Date()))) %>%
group_by(crime, year_day, ReportedYear) %>%
summarise(day_total = sum(indicator)) %>%
ungroup() %>%
group_by(crime, ReportedYear) %>%
mutate(cum_ann_total = cumsum(day_total),
final_ann_total = max(cum_ann_total)) %>%
left_join(., today)
model <- lm(today_total ~ cum_ann_total+year_day, data = year_days %>% filter(crime == "Homicide"))
summary(model)
predict(model, tibble(year_day = yday(ymd("2020-03-25")), cum_ann_total = 21))
View(today)
today <- crime %>%
pivot_longer(cols = c(15:24), names_to = "crime", values_to = "indicator") %>%
mutate(year_day = yday(ReportedDateTime)) %>%
group_by(crime, year_day, ReportedYear) %>%
summarise(day_total = sum(indicator)) %>%
ungroup() %>%
group_by(crime, ReportedYear) %>%
mutate(cum_ann_total = cumsum(day_total)) %>%
filter(year_day == yday(ymd(Sys.Date()))) %>%
select(-c(day_total, year_day),
today_total = cum_ann_total)
today <- crime %>%
pivot_longer(cols = c(15:24), names_to = "crime", values_to = "indicator") %>%
filter(ReportedYear < 2020) %>%
mutate(year_day = yday(ReportedDateTime)) %>%
group_by(crime, year_day, ReportedYear) %>%
summarise(day_total = sum(indicator)) %>%
ungroup() %>%
group_by(crime, ReportedYear) %>%
mutate(cum_ann_total = cumsum(day_total)) %>%
filter(year_day == yday(ymd(Sys.Date())) - 1) %>%
select(-c(day_total, year_day),
today_total = cum_ann_total)
today <- crime %>%
pivot_longer(cols = c(15:24), names_to = "crime", values_to = "indicator") %>%
mutate(year_day = yday(ReportedDateTime)) %>%
group_by(crime, year_day, ReportedYear) %>%
summarise(day_total = sum(indicator)) %>%
ungroup() %>%
group_by(crime, ReportedYear) %>%
mutate(cum_ann_total = cumsum(day_total)) %>%
filter(year_day == yday(ymd(Sys.Date())) - 1) %>%
select(-c(day_total, year_day),
today_total = cum_ann_total)
today <- crime %>%
pivot_longer(cols = c(15:24), names_to = "crime", values_to = "indicator") %>%
filter(ReportedYear < 2020) %>%
mutate(year_day = yday(ReportedDateTime)) %>%
group_by(crime, year_day, ReportedYear) %>%
summarise(day_total = sum(indicator)) %>%
ungroup() %>%
group_by(crime, ReportedYear) %>%
mutate(cum_ann_total = cumsum(day_total)) %>%
filter(year_day == yday(ymd(Sys.Date()))) %>%
select(-c(day_total, year_day),
today_total = cum_ann_total)
View(crime_current)
crime %>%
pivot_longer(cols = c(15:24), names_to = "crime", values_to = "indicator") %>%
filter(ReportedYear == 2020) %>%
mutate(year_day = yday(ReportedDateTime)) %>%
group_by(crime, year_day, ReportedYear) %>%
summarise(day_total = sum(indicator)) %>%
ungroup() %>%
group_by(crime, ReportedYear) %>%
mutate(cum_ann_total = cumsum(day_total)) %>%
filter(year_day == max(year_day))))
crime %>%
pivot_longer(cols = c(15:24), names_to = "crime", values_to = "indicator") %>%
filter(ReportedYear == 2020) %>%
mutate(year_day = yday(ReportedDateTime)) %>%
group_by(crime, year_day, ReportedYear) %>%
summarise(day_total = sum(indicator)) %>%
ungroup() %>%
group_by(crime, ReportedYear) %>%
mutate(cum_ann_total = cumsum(day_total)) %>%
filter(year_day == max(year_day))
prediction <- predict(model, tibble(year_day = yday(ymd("2020-03-25")), cum_ann_total = 21))
this_year <- crime %>%
pivot_longer(cols = c(15:24), names_to = "crime", values_to = "indicator") %>%
mutate(year_day = yday(ReportedDateTime)) %>%
filter(ReportedYear == 2020) %>%
group_by(crime, year_day, ReportedYear) %>%
summarise(day_total = sum(indicator)) %>%
ungroup() %>%
group_by(crime, ReportedYear) %>%
mutate(cum_ann_total = cumsum(day_total),
final_ann_total = max(cum_ann_total))
prediction <- predict(model, this_year)
?broom::augment
prediction <- augment(model, this_year)
prediction <- broom::augment(model, this_year)
prediction <- broom::augment(model, newdata = this_year)
View(prediction)
yday(ymd(Sys.Date()))
yday(ymd("2020-03-25")
)
prediction <- broom::tidy(model, newdata = this_year)
prediction <- broom::augment(model, newdata = this_year)
((30-29.23570)^2)/(1090-2)
((30-29.23570)^2)
sqrt(((30-29.23570)^2)/(1090-2))
sqrt(((30-29.23570)^2)/(2)
)
prediction <- predict(model, this_year, interval = "confidence")
prediction <- predict(model, this_year %>% filter(crime == "Homicide"), interval = "confidence")
prediction[85]
View(prediction)
prediction[85,1] - prediction[85,2]
prediction <- broom::augment(model, newdata = this_year)
1.291556*.023536*21
1.291556*.023536*21 - .279497*.005812*85
1.291556*.023536*21 - .279497*.005812*85+25.870299*.182330
.023536*21 - .005812*85
.023536*21 + .005812*85
prediction <- predict(model, this_year %>% filter(crime == "Homicide"), interval = "confidence")
View(prediction)
prediction <- predict(model, this_year %>% filter(crime == "Homicide"), interval = "prediction")
str_detect("a", "b|a")
blogdown:::serve_site()
library(tidyverse)
library(milwaukeer)
library(lubridate)
crime_current <- read_csv("https://data.milwaukee.gov/dataset/e5feaad3-ee73-418c-b65d-ef810c199390/resource/87843297-a6fa-46d4-ba5d-cb342fb2d3bb/download/wibr.csv") %>%
modify_at("IncidentNum", as.character)
crime_past <- read_csv("https://data.milwaukee.gov/dataset/5a537f5c-10d7-40a2-9b93-3527a4c89fbd/resource/395db729-a30a-4e53-ab66-faeb5e1899c8/download/wibrarchive.csv")
crime <- bind_rows (crime_current, crime_past)
long_crime <- crime %>%
pivot_longer(cols = c(15:24), names_to = "crime", values_to = "indicator") %>%
filter(indicator == 1 & ReportedYear > 2018)
blogdown:::serve_site()
blogdown:::serve_site()
servr::daemon_stop(1
)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
df1 <- mtcars
df2 <- mtcars
df3 <- mtcars
list_df <- list(df1, df2, df3)
for(i in 1:length(list_df)) {
list_df[i] <- list_df[i] * 2
}
list_df[i]
list_df[i] * 2
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
taskscheduleR:::taskschedulerAddin()
blogdown:::new_post_addin()
Sys.time()
servr::daemon_list()
servr::daemon_stop(1)
blogdown:::serve_site()
library(tidyverse)
?wwrite_csv
?write_csv
file.exists("test.csv")
log <- tibble()
blogdown:::serve_site()
taskscheduleR:::taskschedulerAddin()
?source
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
servr::daemon_stop(1)
blogdown:::serve_site()
blogdown:::serve_site()
servr::daemon_stop(1)
<<<<<<< HEAD
blogdown:::serve_site()
blogdown:::serve_site()
servr::daemon_stop(1)
blogdown:::serve_site()
ggplot(data = mpg)
library(tidyverse)
ggplot(data = mpg)
dput(mtcars)
library(wisconsink12)
dput(schools)
=======
>>>>>>> e8c9503780d9f89d65e440a5246eedf0fc801008
>>>>>>> 89f031c8cccb35977496262f4c8645e94ce093d3
